---
AWSTemplateFormatVersion: '2010-09-09'
Description: Kong CloudFormation template. Template creates load balanced Kong instances
  with Postgres RDS instance in a new VPC or user provided VPC
Parameters:
  VpcId:
    Type: String
    Description: Optional - VPC Id of existing VPC. Leave blank to have a new VPC
      created
    Default: ''
    AllowedPattern: "^(?:vpc-[0-9a-f]{8}|)$"
    ConstraintDescription: VPC ID must begin with 'vpc-' or leave blank to have a
      new VPC created
  SubnetId1:
    Type: String
    Description: Conditional- required if VpcId provided. Existing VPC Subnet Id 1
      where ECS instances will run
    Default: ''
  SubnetId2:
    Type: String
    Description: Conditional- required if VpcId provided. Existing VPC Subnet 2 Id
      where ECS instances will run
    Default: ''
  Subnet1AZ:
    Type: String
    Description: Conditional- required if VpcId provided or if *-1a AZ not supported
      by account. Existing VPC Subnet 1 AvailabilityZone
    Default: ''
  Subnet2AZ:
    Type: String
    Description: Conditional- required if VpcId provided or *-1b AZ not supported
      by account or if Subnet1AZ provided. Existing VPC Subnet 2 AvailabilityZone
    Default: ''
  DBName:
    Default: kong
    Description: The database name
    Type: String
    MinLength: '1'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBHost:
    Description: Optional- The database host dns, leave blank to start a new RDS instance
    Type: String
  DBPort:
    Default: '5432'
    Description: Conditional- required if DBHost provided. The database port
    Type: String
    AllowedPattern: "[0-9]+"
    ConstraintDescription: must be a valid port number
  DBUsername:
    Default: kong
    Description: The database admin account username
    Type: String
    MinLength: '1'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBClass:
    Default: db.m4.large
    Description: Database instance class
    Type: String
    AllowedValues:
    - db.t2.micro
    - db.t2.small
    - db.t2.medium
    - db.t2.large
    - db.m1.small
    - db.m1.large
    - db.m1.xlarge
    - db.m2.xlarge
    - db.m4.large
    - db.m4.xlarge
    - db.m4.2xlarge
    - db.m4.4xlarge
    - db.m4.10xlarge
    - db.m3.medium
    - db.m3.large
    - db.m3.xlarge
    - db.m3.2xlarge
    - db.r3.large
    - db.r3.xlarge
    - db.r3.2xlarge
    - db.r3.4xlarge
    - db.r3.8xlarge
    ConstraintDescription: must select a valid database instance type.
  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '6144'
    ConstraintDescription: must be between 5+
  DBPublicAccess:
    Default: false
    Description: Allow Public access to database
    Type: String
    AllowedValues:
    - true
    - false
  DBVersion:
    Description: Aurora Postgres version
    Type: String
    Default: 12.4
    AllowedValues:
    - 12.4
    - 11.9
    - 11.8
  DBSnapshotIdentifier:
    Description: Optional- The RDS snapshot name to restore to the new DB instance.
    Type: String
    Default: ''
  DBStorageEncrypted:
    Default: false
    Description: Specifies whether the DB instance is encrypted
    Type: String
    AllowedValues:
    - true
    - false
  DBStorageType:
    Description: Storage Type for RDS volume
    Type: String
    Default: gp2
    AllowedValues:
    - gp2
    - standard
  SSHLocation:
    Description: The IP address range that can be used to SSH to the Kong and Cassandra
      EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  KongProxyAccess:
    Description: The IP address range that can be used to access the Kong proxy port
      8000
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  KongAdminAccess:
    Description: The IP address range that can be used to access the Kong Admin port
      8001
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  KongKeyName:
    Description: Required- Name of an existing EC2 KeyPair to enable SSH access to
      the instances for Kong
    Type: AWS::EC2::KeyPair::KeyName
    Default: ''
  KongFleetMaxSize:
    Description: Max Number of Kong instances
    Type: Number
    Default: '2'
    MinValue: '1'
  KongFleetDesiredSize:
    Description: Desired Number of Kong instances
    Type: Number
    Default: '1'
    MinValue: '1'
  KongInstanceType:
    Description: 'Kong EC2 instance type. Note: T2 instance is not supported on the
      EC2-Classic platform'
    Type: String
    Default: c3.2xlarge
    AllowedValues:
    - t2.small
    - t2.micro
    - t2.medium
    - t2.large
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KongVersion:
    Description: Kong version (Only 0.15.x and above supported). Leave it blank to
      install latest version.
    Type: String
  KongBootstrapMigration:
    Description: Run the Kong bootstrap migrations by default, set it to false to
      disable migrations.
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
  KongConfigs:
    Description: Kong configuration
    Type: String
    ConstraintDescription: must be in KONG_ENV1=v1[^ KONG_ENV2=v2] format
Mappings:
  RegionKongAmiMap:
    us-east-1:
      HVM: ami-a4c7edb2
    us-east-2:
      HVM: ami-8a7859ef
    us-west-1:
      HVM: ami-327f5352
    us-west-2:
      HVM: ami-6df1e514
    eu-west-1:
      HVM: ami-d7b9a2b1
    eu-west-2:
      HVM: ami-ed100689
    eu-central-1:
      HVM: ami-87dab1eb
    ap-southeast-1:
      HVM: ami-77af2014
    ap-southeast-2:
      HVM: ami-10918173
    sa-east-1:
      HVM: ami-87dab1eb
Conditions:
  CreateRDS:
    Fn::Equals:
    - Ref: DBHost
    - ''
  CreateVpcResources:
    Fn::Equals:
    - Ref: VpcId
    - ''
  UseAZParameter:
    Fn::Not:
    - Fn::And:
      - Fn::Equals:
        - Ref: Subnet1AZ
        - ''
      - Fn::Equals:
        - Ref: Subnet2AZ
        - ''
  ExistingVpcResources:
    Fn::Not:
    - Fn::Equals:
      - Ref: VpcId
      - ''
  UseDbSnapshot:
    Fn::Not:
    - Fn::Equals:
      - Ref: DBSnapshotIdentifier
      - ''
Resources:
  VPC:
    Condition: CreateVpcResources
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: Public
  PublicSubnet1:
    Condition: CreateVpcResources
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/23
      AvailabilityZone:
        Fn::If:
        - UseAZParameter
        - Ref: Subnet1AZ
        - Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: Public
  PublicSubnet2:
    Condition: CreateVpcResources
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.4.0/23
      AvailabilityZone:
        Fn::If:
        - UseAZParameter
        - Ref: Subnet2AZ
        - Fn::Select:
          - '1'
          - Fn::GetAZs:
              Ref: AWS::Region
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: Public
  InternetGateway:
    Condition: CreateVpcResources
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: Public
  AttachGateway:
    Condition: CreateVpcResources
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Condition: CreateVpcResources
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      - Key: Network
        Value: Public
  PublicRoute:
    Condition: CreateVpcResources
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1RouteTableAssociation:
    Condition: CreateVpcResources
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Condition: CreateVpcResources
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  KongLoadBalancerNewVPC:
    Condition: CreateVpcResources
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: 'ipv4'
      Scheme: 'internet-facing'
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
      SubnetMappings:
      - SubnetId:
          Ref: PublicSubnet1
      - SubnetId:
          Ref: PublicSubnet2
      Type: 'application'
  KongLoadBalancerProxyListenerNewVPC:
    Condition: CreateVpcResources
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: 'forward'
          ForwardConfig:
            TargetGroups:
            - TargetGroupArn:
                Ref: LoadBalancerProxyTargetGroup
      LoadBalancerArn: !Ref KongLoadBalancerNewVPC
      Port: 8000
      Protocol: "HTTP"
  KongLoadBalancerAdminListenerNewVPC:
    Condition: CreateVpcResources
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: 'forward'
          ForwardConfig:
            TargetGroups:
            - TargetGroupArn:
                Ref: LoadBalancerAdminTargetGroup
      LoadBalancerArn: !Ref KongLoadBalancerNewVPC
      Port: 8001
      Protocol: "HTTP"
  KongLoadBalancerExistingVPC:
    Condition: ExistingVpcResources
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: 'ipv4'
      Scheme: 'internet-facing'
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
      SubnetMappings:
      - SubnetId:
          Ref: SubnetId1
      - SubnetId:
          Ref: SubnetId2
      Type: 'application'
  KongLoadBalancerProxyListenerExistingVPC:
    Condition: ExistingVpcResources
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: 'forward'
          ForwardConfig:
            TargetGroups:
            - TargetGroupArn:
                Ref: LoadBalancerProxyTargetGroup
      LoadBalancerArn: !Ref KongLoadBalancerExistingVPC
      Port: 8000
      Protocol: "HTTP"
  KongLoadBalancerAdminListenerExistingVPC:
    Condition: ExistingVpcResources
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: 'forward'
          ForwardConfig:
            TargetGroups:
            - TargetGroupArn:
                Ref: LoadBalancerAdminTargetGroup
      LoadBalancerArn: !Ref KongLoadBalancerExistingVPC
      Port: 8001
      Protocol: "HTTP"
  LoadBalancerProxyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: 'true'
      HealthCheckIntervalSeconds: '90'
      HealthCheckPath: '/'
      HealthCheckPort: '8000'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: '60'
      HealthyThresholdCount: '3'
      UnhealthyThresholdCount: '5'
      Port: '8000'
      Protocol: 'HTTP'
      ProtocolVersion: 'HTTP1'
      VpcId:
        Fn::If:
        - CreateVpcResources
        - Ref: VPC
        - Ref: VpcId
      TargetType: 'instance'
  LoadBalancerAdminTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: 'true'
      HealthCheckIntervalSeconds: '90'
      HealthCheckPath: '/'
      HealthCheckPort: '8001'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: '60'
      HealthyThresholdCount: '3'
      UnhealthyThresholdCount: '5'
      Port: '8001'
      Protocol: 'HTTP'
      ProtocolVersion: 'HTTP1'
      VpcId:
        Fn::If:
        - CreateVpcResources
        - Ref: VPC
        - Ref: VpcId
      TargetType: 'instance'
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access on port 8000 and 8001
      VpcId:
        Fn::If:
        - CreateVpcResources
        - Ref: VPC
        - Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8000'
        ToPort: '8000'
        CidrIp:
          Ref: KongProxyAccess
      - IpProtocol: tcp
        FromPort: '8001'
        ToPort: '8001'
        CidrIp:
          Ref: KongAdminAccess
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '1'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
  # KongScalingGroup:
  #   Type: AWS::AutoScaling::AutoScalingGroup
  #   DependsOn: 
  #   - RdsDBCluster
  #   - RdsPostgresDBInstance1
  #   - RdsPostgresDBInstance2
  #   CreationPolicy:
  #     ResourceSignal:
  #       Count:
  #         Ref: KongFleetDesiredSize
  #       Timeout: PT15M
  #   Properties:
  #     AvailabilityZones:
  #       Fn::If:
  #       - CreateVpcResources
  #       - - Fn::GetAtt:
  #           - PublicSubnet1
  #           - AvailabilityZone
  #         - Fn::GetAtt:
  #           - PublicSubnet2
  #           - AvailabilityZone
  #       - - Ref: Subnet1AZ
  #         - Ref: Subnet2AZ
  #     VPCZoneIdentifier:
  #       Fn::If:
  #       - CreateVpcResources
  #       - - Fn::Join:
  #           - ","
  #           - - Ref: PublicSubnet1
  #             - Ref: PublicSubnet2
  #       - - Ref: SubnetId1
  #         - Ref: SubnetId2
  #     LaunchConfigurationName:
  #       Ref: KongLaunchConfig
  #     MinSize: '1'
  #     MaxSize:
  #       Ref: KongFleetMaxSize
  #     DesiredCapacity:
  #       Ref: KongFleetDesiredSize
  #     TargetGroupARNs:
  #       - Ref: LoadBalancerProxyTargetGroup
  #       - Ref: LoadBalancerAdminTargetGroup
  #     Tags:
  #     - Key: Name
  #       Value:
  #         Ref: AWS::StackId
  #       PropagateAtLaunch: 'true'
  ASGUpdateRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      Policies:
      - PolicyName: ASGUpdateRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:Describe*
            - cloudformation:DescribeStackResource
            Resource: "*"
          - Effect: Allow
            Action: autoscaling:UpdateAutoScalingGroup
            Resource: "*"
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource:
              Ref: RdsDBSecret
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
  ASGUpdateProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: ASGUpdateRole
  KongLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId:
        Fn::FindInMap:
        - RegionKongAmiMap
        - Ref: AWS::Region
        - HVM
      InstanceType:
        Ref: KongInstanceType
      KeyName:
        Ref: KongKeyName
      SecurityGroups:
      - Ref: KongSecurityGroup
      IamInstanceProfile:
        Ref: ASGUpdateProfile
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |-
              #!/bin/bash
              yum update -y aws-cfn-bootstrap
              echo '* soft nofile 65000' >> /etc/security/limits.conf
              echo '* hard nofile 65000' >> /etc/security/limits.conf
              kong_version=${KongVersion}
              if [ "$kong_version" != "" ]
              then
                kong_version="-$kong_version"
              fi
              echo "[kong] adding Kong to yum repository"
              mkdir /usr/local/kong
              wget https://bintray.com/kong/kong-rpm/rpm -O bintray-kong-kong-rpm.repo
              if [ "$?" -ne "0" ]
              then
                /opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource KongScalingGroup --region ${AWS::Region} --reason "failed to install kong$kong_version" 
                echo "[kong] failed to install kong$kong_version, exiting..." 
                exit
              fi
              sed -i -e 's/baseurl.*/&\/amazonlinux\/amazonlinux'/ bintray-kong-kong-rpm.repo
              mv bintray-kong-kong-rpm.repo /etc/yum.repos.d/

              echo "[kong] setting up Kong environment"
              yum update -y
              yum install -y jq
              yum install -y epel-release
              amazon-linux-extras install -y epel
              kong_migrations=${KongBootstrapMigration}
              KONG_ENV="${KongEnv}"
              export $KONG_ENV
              export KONG_ADMIN_GUI_URL=http://$(curl http://169.254.169.254/latest/meta-data/public-ipv4):8002
              export KONG_DATABASE=postgres
              export KONG_PG_DATABASE=${DBName}
              export KONG_PG_HOST=${KongPgHost}
              export KONG_PG_PORT=${KongPgPort}
              kong_pg_secret=$(aws secretsmanager get-secret-value --secret-id ${RdsDBSecret} --query SecretString --region ${AWS::Region} --output text)
              export KONG_PG_USER=$(echo $kong_pg_secret | jq -r .username) 
              export KONG_PG_PASSWORD=$(echo $kong_pg_secret | jq -r .password) 
              echo "[kong] installing Kong with following environments:" 
              env
              yum install -y kong$kong_version
              chown ec2-user /usr/local/kong
              if [ "$?" -ne "0" ]
              then
                /opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource KongScalingGroup --region ${AWS::Region} --reason "failed to install kong$kong_version.aws.rpm" 
                echo "[kong] failed to install kong$kong_version.aws.rpm, exiting..." 
                exit
              fi
              if [ "$kong_migrations" == "true" ]
              then
                echo "[kong] starting migrations..." 
                su ec2-user -s /bin/sh -c "/usr/local/bin/kong migrations bootstrap --v"
              fi
              su ec2-user -s /bin/sh -c "/usr/local/bin/kong start --v"
              if ! /usr/local/bin/kong health --v; then
                echo "[kong] failed to start kong, exiting..." 
                /opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource KongScalingGroup --region ${AWS::Region} --reason "Failed to start Kong" 
                exit
              fi
              /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource KongScalingGroup --region ${AWS::Region} --reason "Kong setup completed"
            - KongPgHost:
                Fn::If:
                - CreateRDS
                - Fn::GetAtt:
                  - RdsDBCluster
                  - Endpoint.Address
                - Ref: DBHost
              KongPgPort:
                Fn::If:
                - CreateRDS
                - Fn::GetAtt:
                  - RdsDBCluster
                  - Endpoint.Port
                - Ref: DBPort
              KongEnv:
                Fn::Join:
                - " "
                - Fn::Split:
                  - '^'
                  - Ref: KongConfigs
  KongSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      VpcId:
        Fn::If:
        - CreateVpcResources
        - Ref: VPC
        - Ref: VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '8000'
        ToPort: '8001'
        SourceSecurityGroupId:
          Ref: LoadBalancerSecurityGroup
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '1'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
  Ingress7946:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
        - KongSecurityGroup
        - GroupId
      IpProtocol: tcp
      FromPort: '7946'
      ToPort: '7946'
      SourceSecurityGroupId:
        Fn::GetAtt:
        - KongSecurityGroup
        - GroupId
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Condition: CreateRDS
    Properties:
      DBSubnetGroupDescription: Subnets available for the RDS DB Instance
      SubnetIds:
        Fn::If:
        - CreateVpcResources
        - - Ref: PublicSubnet1
          - Ref: PublicSubnet2
        - - Ref: SubnetId1
          - Ref: SubnetId2
  RdsDBSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: KongRdsDBSecret
      Description: "This secret has a dynamically generated secret password."
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Sub: '{"username": "${DBUsername}"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
  RdsDBCluster:
    Type: AWS::RDS::DBCluster
    Condition: CreateRDS
    Properties:
      Engine: aurora-postgresql
      EngineVersion:
        Ref: DBVersion
      DatabaseName:
        Ref: DBName
      MasterUsername:
        Fn::Sub: '{{resolve:secretsmanager:${RdsDBSecret}:SecretString:username}}'
      MasterUserPassword:
        Fn::Sub: '{{resolve:secretsmanager:${RdsDBSecret}:SecretString:password}}'
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      StorageEncrypted:
        Ref: DBStorageEncrypted
      SnapshotIdentifier:
        Fn::If:
        - UseDbSnapshot
        - Ref: DBSnapshotIdentifier
        - Ref: AWS::NoValue
      VpcSecurityGroupIds:
      - Ref: DBSecurityGroup
    DeletionPolicy: Snapshot
  RdsPostgresDBInstance1:
    Type: AWS::RDS::DBInstance
    Condition: CreateRDS
    Properties:
      Engine: aurora-postgresql
      DBInstanceClass:
        Ref: DBClass
      DBClusterIdentifier:
        Ref: RdsDBCluster
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      PubliclyAccessible:
        Ref: DBPublicAccess
  RdsPostgresDBInstance2:
    Type: AWS::RDS::DBInstance
    Condition: CreateRDS
    Properties:
      Engine: aurora-postgresql
      DBInstanceClass:
        Ref: DBClass
      DBClusterIdentifier:
        Ref: RdsDBCluster
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      PubliclyAccessible:
        Ref: DBPublicAccess
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateRDS
    Properties:
      GroupDescription: Database security groups
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId:
          Ref: KongSecurityGroup
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '1'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      VpcId:
        Fn::If:
        - CreateVpcResources
        - Ref: VPC
        - Ref: VpcId
Outputs:
  ProxyURL:
    Description: Kong Proxy URL
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::If:
          - CreateVpcResources
          - Fn::GetAtt:
            - KongLoadBalancerNewVPC
            - DNSName
          - Fn::GetAtt:
            - KongLoadBalancerExistingVPC
            - DNSName
        - ":8000"
  AdminURL:
    Description: Kong Admin URL
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::If:
          - CreateVpcResources
          - Fn::GetAtt:
            - KongLoadBalancerNewVPC
            - DNSName
          - Fn::GetAtt:
            - KongLoadBalancerExistingVPC
            - DNSName
        - ":8001"
